from enum import Enum
from pathlib import Path
from unittest import TestCase
from unittest.mock import patch

from servey_stub.type_definition.enum_type_definition_factory import (
    EnumTypeDefinitionFactory,
)
from servey_stub.type_definition.imports_definition import ImportsDefinition
from servey_stub.type_definition.type_definition import TypeDefinition
from servey_stub.type_definition.type_definition_context import TypeDefinitionContext
from tests.mock_file_system import MockFileSystem


class TestEnumTypeDefinitionFactory(TestCase):
    def test_create_type_definition(self):
        context = TypeDefinitionContext(Path("my_project/models"), "my_project.models")
        factory = EnumTypeDefinitionFactory()
        mock_file_system = MockFileSystem()
        # noinspection SpellCheckingInspection
        with (
            patch("os.path.exists", mock_file_system.exists),
            patch("builtins.open", mock_file_system.open),
            patch("pathlib.PosixPath.mkdir", mock_file_system.mkdir),
        ):
            type_definition = factory.create_type_definition(FooBar, context)
        self.assertEqual(
            type_definition,
            TypeDefinition(
                "FooBar", ImportsDefinition(["my_project.models.foo_bar.FooBar"])
            ),
        )
        self.assertEqual(1, len(mock_file_system.contents))
        content = (
            mock_file_system.contents.get(Path("my_project/models/foo_bar.py"))
            .getvalue()
            .split("\n")
        )
        next(c for c in content if c.startswith("# Updated At: "))
        content = [c for c in content if not c.startswith("# Updated At: ")]
        self.assertEqual(content, ENUM_CONTENT)

    def test_create_type_definition_unknown(self):
        context = TypeDefinitionContext(Path("my_project/models"), "my_project.models")
        factory = EnumTypeDefinitionFactory()
        type_definition = factory.create_type_definition(
            TestEnumTypeDefinitionFactory, context
        )
        self.assertIsNone(type_definition)


class FooBar(Enum):
    FOO = "foo"
    BAR = "bar"


ENUM_CONTENT = [
    "# GENERATED BY SERVEY-STUB",
    "# Manual updates to this file may be lost. ",
    "from enum import Enum",
    "",
    "class FooBar(Enum):",
    '    FOO = "foo"',
    '    BAR = "bar"',
    "",
]
